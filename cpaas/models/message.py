# coding: utf-8

"""
    cpaas api

    # Overview  mGage CPaaS API lets you interact with the CPaaS platform. It allows you to query your account, set up webhooks, send messages and buy phone numbers.  # API and Clients Versioning  CPaaS APIs are versioned using the format vX.Y where X is the major version number and Y is minor. All minor version changes are backwards compatible. Major releases are not, please be careful when upgrading.  A new account is pinned to the latest version at the time of first request. By default every request sent CPaaS is processed using that version, even if there have been subsequent breaking changes. This is done to prevent existing user applications from breaking. You can change the pinned version for your account using the account dashboard. The default API version can be overridden by specifying the header `api-version`. Note: Specifying this value will not change your pinned version for other calls.  CPaaS also provides HTTP API clients for all major languages. Release versions of these clients correspond to their API Version supported. Client version vX.Y.Z supports API version vX.Y. HTTP Clients are configured to use `api-version` header for that client version. When using official CPaaS HTTP Clients only, you dont need to concern yourself with pinned version. To upgrade your API version simply update the client.  # Common Response format  All CPaaS APIs follow a common response format. Each response will have a `meta` field which contains metadata about the response (like the request_uuid).  APIs which return a single object will have a field `data` which contains the object being returned.  APIs which return a list of objects will have a field `objects` which contains the list of objects being returned.  ## Pagination Pagination for list APIs are controlled using query parameters:   - `limit`: Number of objects to be returned   - `offset`: Number of objects to skip before collecting the output list.  These fields are also present in the response under the field `meta`. 

    OpenAPI spec version: 1.0
    Contact: apiteam@mgageindia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Message(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'destination': 'list[str]',
        'text': 'str',
        'notification_url': 'str',
        'notification_method': 'str'
    }

    attribute_map = {
        'source': 'source',
        'destination': 'destination',
        'text': 'text',
        'notification_url': 'notification_url',
        'notification_method': 'notification_method'
    }

    def __init__(self, source=None, destination=None, text=None, notification_url=None, notification_method=None):
        """
        Message - a model defined in Swagger
        """

        self._source = None
        self._destination = None
        self._text = None
        self._notification_url = None
        self._notification_method = None

        self.source = source
        self.destination = destination
        self.text = text
        if notification_url is not None:
          self.notification_url = notification_url
        if notification_method is not None:
          self.notification_method = notification_method

    @property
    def source(self):
        """
        Gets the source of this Message.
        Sender ID for the message which will be displayed to the receiver. It should specification E.164 with international calling codes but without the `+` in front.   - When sending a message to US/Canada, the Sender ID must be a number     which belongs to your CPaaS Subaccount (or main account). 

        :return: The source of this Message.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Message.
        Sender ID for the message which will be displayed to the receiver. It should specification E.164 with international calling codes but without the `+` in front.   - When sending a message to US/Canada, the Sender ID must be a number     which belongs to your CPaaS Subaccount (or main account). 

        :param source: The source of this Message.
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def destination(self):
        """
        Gets the destination of this Message.
        The destination numbers for the message. 

        :return: The destination of this Message.
        :rtype: list[str]
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this Message.
        The destination numbers for the message. 

        :param destination: The destination of this Message.
        :type: list[str]
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def text(self):
        """
        Gets the text of this Message.

        :return: The text of this Message.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this Message.

        :param text: The text of this Message.
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def notification_url(self):
        """
        Gets the notification_url of this Message.
        URL on which message status change notifications will be sent

        :return: The notification_url of this Message.
        :rtype: str
        """
        return self._notification_url

    @notification_url.setter
    def notification_url(self, notification_url):
        """
        Sets the notification_url of this Message.
        URL on which message status change notifications will be sent

        :param notification_url: The notification_url of this Message.
        :type: str
        """

        self._notification_url = notification_url

    @property
    def notification_method(self):
        """
        Gets the notification_method of this Message.
        The HTTP method which be be used to send the notification. Defaults to POST if `notification_url` is specified. 

        :return: The notification_method of this Message.
        :rtype: str
        """
        return self._notification_method

    @notification_method.setter
    def notification_method(self, notification_method):
        """
        Sets the notification_method of this Message.
        The HTTP method which be be used to send the notification. Defaults to POST if `notification_url` is specified. 

        :param notification_method: The notification_method of this Message.
        :type: str
        """

        self._notification_method = notification_method

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
